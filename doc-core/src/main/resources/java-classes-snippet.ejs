<%
function shortName(name) {
    var components = name.split('.');
    return components[components.length - 1];
}

function makeMethodSignature(method) {
    var signature = '';

    signature += 'public ';

    signature += shortName(method.returnTypeName) + ' ';
    signature += method.name;
    signature += '(';
    for(var parameterIndex = 0; parameterIndex < method.parameters.size(); ++parameterIndex) {
        var parameter = method.parameters.get(parameterIndex);
        signature += '\n  ' + shortName(parameter.typeName) + ' ' + parameter.name;
        if(parameterIndex != method.parameters.size() - 1) {
            signature += ',';
        } else {
            signature += '\n';
        }
    }
    signature += ')';

    return signature;
}
%>

<% for(var classIndex = 0; classIndex < model.size(); ++classIndex) {
    var clazz = model.get(classIndex);
    if(!clazz.isDocumented) continue; %>

==== <%= clazz.name %>

<%= clazz.description %>

    <% if(clazz.methods.size() === 0) { %>
_<%= clazz.name %> does not have any methods._
    <% } else { %>
        <% for(var methodIndex = 0; methodIndex < clazz.methods.size(); ++methodIndex) {
            var method = clazz.methods.get(methodIndex);
            if(!method.isDocumented) continue; %>

===== <%= method.name %>

[source,java]
----
<%= makeMethodSignature(method) %>
----

<%= method.description %>

            <% if(method.parameters.size() > 0) { %>
[options="header"]
|===
| Name | Type | Description
                <% for(var parameterIndex = 0; parameterIndex < method.parameters.size(); ++parameterIndex) {
                    var parameter = method.parameters.get(parameterIndex); %>
| `<%= parameter.name %>` | `<%= shortName(parameter.typeName) %>` | <%= parameter.description %>
                <% } %>
|===
            <% } %>
Returns: <%= method.returnDescription %>

'''
        <% } %>
    <% } %>
<% } %>
