<%
function makeMethodSignature(method) {
    var signature = '';

    signature += method.name;
    signature += '(';

    for(var parameterIndex = 0; parameterIndex < method.parameters.size(); ++parameterIndex) {
        var parameter = method.parameters.get(parameterIndex);
        signature += '\n  ' + parameter.name + ': ' + parameter.type;
        if(parameterIndex != method.parameters.size() - 1) {
            signature += ',';
        } else {
            signature += '\n';
        }
    }
    signature += ')';
    signature += ': ' + method.returnType;

    return signature;
}
%>

<% for(var fileIndex = 0; fileIndex < model.files.size(); ++fileIndex) {
    var file = model.files.get(fileIndex); %>

        <% for(var classIndex = 0; classIndex < file.classes.size(); ++classIndex) {
            var clazz = file.classes.get(classIndex); %>

==== Class <%= clazz.name %>

<%= clazz.comment %>

        <% if(clazz.methods.size() === 0) { %>
_<%= clazz.name %> does not have any methods._
        <% } else { %>
            <% for(var methodIndex = 0; methodIndex < clazz.methods.size(); ++methodIndex) {
                var method = clazz.methods.get(methodIndex); %>

===== <%= method.name %>

[source,javascript]
----
<%- makeMethodSignature(method) %>
----

<%= method.comment %>

                <% if(method.parameters.size() > 0) { %>
[options="header"]
|===
| Name | Type | Description
                    <% for(var parameterIndex = 0; parameterIndex < method.parameters.size(); ++parameterIndex) {
                        var parameter = method.parameters.get(parameterIndex); %>
| `<%= parameter.name %>` | `<%= parameter.type %>` | <%= parameter.comment %>
                    <% } %>
|===
                <% } %>

Returns: <%= method.returnType %>

'''
            <% } %>
        <% } %>
    <% } %>
<% } %>
